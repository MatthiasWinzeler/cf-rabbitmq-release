#!/bin/sh -e

[ -z "$DEBUG" ] || set -x

<%

cluster_partition_handling = p("rabbitmq-server.cluster_partition_handling")
use_native_clustering_formation = p("rabbitmq-server.use_native_clustering_formation")

ssl = false
if_p("rabbitmq-server.ssl.key") do |key|
  ssl = true
end

# TLS versions with a '.' character should include single quotes
supported_tls_versions = %w{'tlsv1.2' 'tlsv1.1'}
security_options = p('rabbitmq-server.ssl.security_options')
if security_options.include?('enable_tls1_0')
  supported_tls_versions << "tlsv1"
end
ssl_verification = 'verify_none'
if p("rabbitmq-server.ssl.verify")
  ssl_verification = 'verify_peer'
end
ssl_verification_depth = p("rabbitmq-server.ssl.verification_depth")
fail_if_no_peer_cert = p("rabbitmq-server.ssl.fail_if_no_peer_cert")
disk_alarm_threshold = p("rabbitmq-server.disk_alarm_threshold")
%>

(
  . /var/vcap/jobs/rabbitmq-server/lib/rabbitmq-config-vars.bash
  PREFIX='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT BELOW ###'
  SUFFIX='### AUTOGENERATED BY RABBITMQ CLUSTERING - DO NOT EDIT ABOVE ###'
  SED=/bin/sed
  MKTEMP=/bin/mktemp
  RM=/bin/rm
  CP=/bin/cp
  MKDIR=/bin/mkdir
  DIRNAME=/usr/bin/dirname
  CHOWN=/bin/chown
  CHMOD=/bin/chmod
  DATE=/bin/date
  COOKIE="${ERLANG_COOKIE}"
  USER=vcap
  HOME_DIR=/var/vcap/store/rabbitmq
  HTTP_ACCESS_LOG_DIR=/var/vcap/sys/log/rabbitmq-server/management-ui
  RABBITMQ_MNESIA_BASE="${HOME_DIR}/mnesia"
  RABBITMQ_MNESIA_DIR="${RABBITMQ_MNESIA_BASE}/db"
  RABBITMQ_PLUGINS_EXPAND_DIR="$RABBITMQ_MNESIA_BASE/db-plugins-expand"
  SCRIPT_DIR="$(${DIRNAME} $0)"
  RMQ_VERSION=3.6.11
<% if ! use_native_clustering_formation %>
  RMQ_CLUSTERER_VERSION=3.6.5
  CLUSTER_CONFIG="${HOME_DIR}/etc/rabbitmq/cluster.config"
<% end %>

  # Unfortunate tight coupling. Beware.
  # We need this for CONF_ENV_FILE, HOME, ERL_INETRC, and for MNESIA_BASE
  . /var/vcap/packages/rabbitmq-server/privbin/rabbitmq-defaults

  # Load the shared variables for the node name migration
  . /var/vcap/jobs/rabbitmq-server/bin/node_name_migration.sh

  ${MKDIR} -p $(${DIRNAME} ${CONF_ENV_FILE})

  printf "{file, hosts, \"/etc/hosts\"}.\n{lookup, [file, dns]}.\n" > ${ERL_INETRC}

  # 3. Modify the rabbitmq-env.conf to include the right NODENAME and SERVER_START_ARGS.
  #    SERVER_START_ARGS is appended to the Erlang VM command line, like so (shortened and formatted
  #    for readability):
  #
  # -s rabbit_clusterer boot -pa /var/vcap/packages/rabbitmq-server/privbin/../plugins/rabbitmq_clusterer-3.3.5.ez/rabbitmq_clusterer-3.3.5/ebin
  # -sname rabbit@node0
  # -rabbitmq_clusterer config "/var/vcap/store/rabbitmq/etc/rabbitmq/cluster.config"
  # -rabbit disk_free_limit 1000000
  # -rabbit cluster_partition_handling autoheal -rabbit halt_on_upgrade_failure false
  # -rabbit tcp_listeners [] -rabbit ssl_listeners [5671]
  # -rabbitmq_management listener [{port,15672},{ssl,true}] http_log_dir "/var/vcap/sys/log/rabbitmq-server"
  # -rabbitmq_mqtt ssl_listeners [8883]
  # -rabbitmq_stomp ssl_listeners [61614]
  # -rabbit ssl_options [{cacertfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/cacert.pem"},
  #                      {certfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/cert.pem"},
  #                      {keyfile,"/var/vcap/jobs/rabbitmq-server/bin/../etc/key.pem"},
  #                      {verify,verify_none},
  #                      {fail_if_no_peer_cert,false},
  #                      {versions,['tlsv1.2','tlsv1.1',tlsv1]}]
  #
  # SERVER_START_ARGS is stored in rabbitmq-env.conf (currently /var/vcap/store/rabbitmq/etc/rabbitmq/rabbitmq-env.conf),
  # which is generated in this template.
  #
  # SERVER_START_ARGS include TLS configuration and options.
  # Some of the options include quotes, both single and double. To avoid multiple layers of
  # quoting, which is quite fragile, shell script string concatenation is used:
  # 'a"'"'b" is treated as a single string, `a"'b`, by bash.
  CONFIG="CONFIG_FILE='${SCRIPT_DIR}/../etc/rabbitmq'"
  NODENAME="NODENAME='${SELF_NODE}'"

  cluster_args="-rabbit cluster_nodes {[$RABBITMQ_NODES_STRING],disc}"

  cluster_args="$cluster_args -rabbit log_levels [{connection,info}]"
  cluster_args="$cluster_args -rabbit disk_free_limit <%= disk_alarm_threshold %>"
  cluster_args="$cluster_args -rabbit cluster_partition_handling <%= cluster_partition_handling %>"
  cluster_args="$cluster_args -rabbit halt_on_upgrade_failure false"
  cluster_args="$cluster_args -rabbitmq_mqtt subscription_ttl 1800000"
  cluster_args="$cluster_args -rabbitmq_management http_log_dir \\\"${HTTP_ACCESS_LOG_DIR}\\\""

  SERVER_START_ARGS="SERVER_START_ARGS=\"$cluster_args\""

  if [ -f ${CONF_ENV_FILE} ]
  then \
    ${CP} ${CONF_ENV_FILE} ${DIR}/env.backup
  else \
    printf '' > ${DIR}/env.backup
  fi

  RABBITMQ_BOOT_MODULE="RABBITMQ_BOOT_MODULE=rabbit\nRABBITMQ_USE_LONGNAME=true"

  ${SED} "/${PREFIX}/,/${SUFFIX}/d" < ${DIR}/env.backup > ${DIR}/env

  printf "${PREFIX}\n" >> ${DIR}/env
  printf "${NODENAME}\n" >> ${DIR}/env
  printf "${RABBITMQ_BOOT_MODULE}\n" >> ${DIR}/env

  printf "${CONFIG}\n" >> ${DIR}/env
  printf "${SERVER_START_ARGS}\n" >> ${DIR}/env

  # set custom RabbitMQ db / plugin directory not specifying the node name
  printf "RABBITMQ_MNESIA_DIR=${RABBITMQ_MNESIA_DIR}\n" >> ${DIR}/env
  printf "RABBITMQ_PLUGINS_EXPAND_DIR=${RABBITMQ_PLUGINS_EXPAND_DIR}\n" >> ${DIR}/env

  printf "${SUFFIX}\n" >> ${DIR}/env

  ${CP} ${DIR}/env ${CONF_ENV_FILE}

  # 4. Write out the cluster_config

  UPGRADE_PREPARATION_NODES_FILE=/var/vcap/data/upgrade_preparation_nodes
  rm -f $UPGRADE_PREPARATION_NODES_FILE

  OLD_IFS="$IFS"
  IFS=","
  for node in $RABBITMQ_NODES_STRING
  do
    echo $node >> $UPGRADE_PREPARATION_NODES_FILE
  done
  IFS="$OLD_IFS"

  # 5. Write out the cookie
  printf "${COOKIE}" > ${DIR}/.erlang.cookie
  ${CHOWN} ${USER}:${USER} ${DIR}/.erlang.cookie
  ${CHMOD} 0400 ${DIR}/.erlang.cookie
  ${CP} -a ${DIR}/.erlang.cookie ${HOME}

)
